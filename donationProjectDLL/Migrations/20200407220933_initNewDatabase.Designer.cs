// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using donationProjectDLL.DomainContext;

namespace donationProjectDLL.Migrations
{
    [DbContext(typeof(donationProjectDBContext))]
    [Migration("20200407220933_initNewDatabase")]
    partial class initNewDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("donationProjectDLL.Domains.city", b =>
                {
                    b.Property<int>("cityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("cityName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("cityId");

                    b.ToTable("city");
                });

            modelBuilder.Entity("donationProjectDLL.Domains.cityArea", b =>
                {
                    b.Property<int>("areaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("areaName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("cityId")
                        .HasColumnType("int");

                    b.HasKey("areaId");

                    b.HasIndex("cityId");

                    b.ToTable("cityArea");
                });

            modelBuilder.Entity("donationProjectDLL.Domains.cnicPicRecord", b =>
                {
                    b.Property<int>("cnicPicRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("cnicBackPicPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("cnicFrontPicPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("userGuid")
                        .HasColumnType("char(36)");

                    b.Property<int>("userRecordId")
                        .HasColumnType("int");

                    b.HasKey("cnicPicRecordId");

                    b.HasIndex("userRecordId")
                        .IsUnique();

                    b.ToTable("cnicPicRecord");
                });

            modelBuilder.Entity("donationProjectDLL.Domains.familyMembersRecord", b =>
                {
                    b.Property<int>("familyMembersRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("numberOfFamilyMembers")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("userRecordId")
                        .HasColumnType("int");

                    b.HasKey("familyMembersRecordId");

                    b.HasIndex("userRecordId")
                        .IsUnique();

                    b.ToTable("familyMembersRecords");
                });

            modelBuilder.Entity("donationProjectDLL.Domains.itemCategory", b =>
                {
                    b.Property<int>("itemCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("itemCategoryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("itemCategoryId");

                    b.ToTable("itemCategory");
                });

            modelBuilder.Entity("donationProjectDLL.Domains.itemDetails", b =>
                {
                    b.Property<int>("itemDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ammount")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("itemCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("itemDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("itemName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ownerId")
                        .HasColumnType("int");

                    b.HasKey("itemDetailId");

                    b.HasIndex("itemCategoryId");

                    b.ToTable("itemDetails");
                });

            modelBuilder.Entity("donationProjectDLL.Domains.itemDonation", b =>
                {
                    b.Property<int>("itemDonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ammount")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("donationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("donationId")
                        .HasColumnType("int");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<int>("receiverId")
                        .HasColumnType("int");

                    b.HasKey("itemDonationId");

                    b.ToTable("itemDonation");
                });

            modelBuilder.Entity("donationProjectDLL.Domains.moneyDonation", b =>
                {
                    b.Property<int>("moneyDonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ammount")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("donationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("donationId")
                        .HasColumnType("int");

                    b.Property<int>("receiverId")
                        .HasColumnType("int");

                    b.HasKey("moneyDonationId");

                    b.ToTable("moneyDonation");
                });

            modelBuilder.Entity("donationProjectDLL.Domains.organizationData", b =>
                {
                    b.Property<int>("organizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("aboutOrganization")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("areaId1")
                        .HasColumnType("int");

                    b.Property<int>("cityId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("licenseNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("organizationAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("organizationName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("userGuid")
                        .HasColumnType("char(36)");

                    b.HasKey("organizationId");

                    b.HasIndex("areaId1");

                    b.ToTable("organizationData");
                });

            modelBuilder.Entity("donationProjectDLL.Domains.screenNameRecord", b =>
                {
                    b.Property<int>("screenNameRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("userGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("userPassword")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("userRecordId")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("screenNameRecordId");

                    b.HasIndex("userRecordId")
                        .IsUnique();

                    b.ToTable("screenNameRecord");
                });

            modelBuilder.Entity("donationProjectDLL.Domains.userRecord", b =>
                {
                    b.Property<int>("userRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("UserTypeid")
                        .HasColumnType("int");

                    b.Property<int?>("areaId1")
                        .HasColumnType("int");

                    b.Property<int>("cityId")
                        .HasColumnType("int");

                    b.Property<string>("emailAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("familyNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("isActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("userAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("userAddressPerCNIC")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("userCNIC")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("userFirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("userGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("userLastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("userRecordId");

                    b.HasIndex("UserTypeid");

                    b.HasIndex("areaId1");

                    b.ToTable("userRecord");
                });

            modelBuilder.Entity("donationProjectDLL.Domains.userType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("typeName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("userType");
                });

            modelBuilder.Entity("donationProjectDLL.Domains.cityArea", b =>
                {
                    b.HasOne("donationProjectDLL.Domains.city", "City")
                        .WithMany("CityAreas")
                        .HasForeignKey("cityId");
                });

            modelBuilder.Entity("donationProjectDLL.Domains.cnicPicRecord", b =>
                {
                    b.HasOne("donationProjectDLL.Domains.userRecord", "UserRecord")
                        .WithOne("CnicPicRecord")
                        .HasForeignKey("donationProjectDLL.Domains.cnicPicRecord", "userRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("donationProjectDLL.Domains.familyMembersRecord", b =>
                {
                    b.HasOne("donationProjectDLL.Domains.userRecord", "UserRecord")
                        .WithOne("FamilyMembersRecord")
                        .HasForeignKey("donationProjectDLL.Domains.familyMembersRecord", "userRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("donationProjectDLL.Domains.itemDetails", b =>
                {
                    b.HasOne("donationProjectDLL.Domains.itemCategory", "itemCategory")
                        .WithMany("ItemDetails")
                        .HasForeignKey("itemCategoryId");
                });

            modelBuilder.Entity("donationProjectDLL.Domains.organizationData", b =>
                {
                    b.HasOne("donationProjectDLL.Domains.cityArea", "areaId")
                        .WithMany("OrganizationData")
                        .HasForeignKey("areaId1");
                });

            modelBuilder.Entity("donationProjectDLL.Domains.screenNameRecord", b =>
                {
                    b.HasOne("donationProjectDLL.Domains.userRecord", "UserRecord")
                        .WithOne("ScreenNameRecord")
                        .HasForeignKey("donationProjectDLL.Domains.screenNameRecord", "userRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("donationProjectDLL.Domains.userRecord", b =>
                {
                    b.HasOne("donationProjectDLL.Domains.userType", "UserType")
                        .WithMany("UserRecords")
                        .HasForeignKey("UserTypeid");

                    b.HasOne("donationProjectDLL.Domains.cityArea", "areaId")
                        .WithMany("UserRecords")
                        .HasForeignKey("areaId1");
                });
#pragma warning restore 612, 618
        }
    }
}
